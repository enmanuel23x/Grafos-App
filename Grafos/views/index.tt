<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body style="background: url('./images/bg.jpg');
  background-size: 1360px 760px;">
  <div style="text-align:center;"><input id="rutacorta" class="in" size="80"/></div>
<svg width="1200" height="500" id="net"></svg>
<div class="side-bar">
    <form action="/write_json">
        <input id="text1"name="nodes" class="in" size="80"/>
        <input class="btn"type="submit"  value="Cargar Grafo" />
    </form>
    <form action="/dijkstra">
        <input name="ruta"id="ruta" class="in"  size="80"/>
        <input class="btn"type="submit" value="Buscar ruta mas corta" />
    </form>
</div>
<script src="./javascripts/d3.v4.min.js"></script>
<script src="./javascripts/d3-selection-multi.v1.js"></script>

<script type="text/javascript">
    var colors = d3.scaleOrdinal(d3.schemeCategory10);
    
    var links2=[];
    var svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height"),
        node,
        link;

    svg.append('defs').append('marker')
        .attrs({'id':'arrowhead',
            'viewBox':'-0 -5 10 10',
            'refX':13,
            'refY':0,
            'orient':'auto',
            'markerWidth':13,
            'markerHeight':13,
            'xoverflow':'visible'})
        .append('svg:path')
        .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
        .attr('fill', 'white')
        .style('stroke','none');

    var simulation = d3.forceSimulation()
        .force("link", d3.forceLink().id(function (d) {return d.id;}).distance(function (d) {return d.distance*20;}).strength(1))
        .force("charge", d3.forceManyBody())
        .force("center", d3.forceCenter(width / 2, height / 2));

    function update(links, nodes) {
        link = svg.selectAll(".link")
            .data(links)
            .enter()
            .append("line")
            .attr("class", "link")
            .attr('marker-end','url(#arrowhead)')

        link.append("title")
            .text(function (d) {return d.type+":"+d.distance;});

        edgepaths = svg.selectAll(".edgepath")
            .data(links)
            .enter()
            .append('path')
            .attrs({
                'class': 'edgepath',
                'fill-opacity': 0,
                'stroke-opacity': 0,
                'id': function (d, i) {return 'edgepath' + i}
            })
            .style("pointer-events", "none");

        edgelabels = svg.selectAll(".edgelabel")
            .data(links)
            .enter()
            .append('text')
            .style("pointer-events", "none")
            .attrs({
                'class': 'edgelabel',
                'id': function (d, i) {return 'edgelabel' + i},
                'font-size': 15,
                'fill': 'white'
            });

        edgelabels.append('textPath')
            .attr('xlink:href', function (d, i) {return '#edgepath' + i})
            .style("text-anchor", "middle")
            .style("pointer-events", "none")
            .attr("startOffset", "50%")
            .text(function (d) {return d.type+":"+d.distance});

        node = svg.selectAll(".node")
            .data(nodes)
            .enter()
            .append("g")
            .attr("class", "node")
            .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
            );

        node.append("circle")
            .attr("r", 9)
            .style("fill", function (d, i) {return colors(i);})

        node.append("title")
            .text(function (d) {return d.id;});

        node.append("text")
            .attr("dy", -3)
            .style('fill', 'white')
            .text(function (d) {return d.name;});

        simulation
            .nodes(nodes)
            .on("tick", ticked);

        simulation.force("link")
            .links(links);
    }

    function ticked() {
        link
            .attr("x1", function (d) {return d.source.x;})
            .attr("y1", function (d) {return d.source.y;})
            .attr("x2", function (d) {return d.target.x;})
            .attr("y2", function (d) {return d.target.y;});

        node
            .attr("transform", function (d) {return "translate(" + d.x + ", " + d.y + ")";});

        edgepaths.attr('d', function (d) {
            return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;
        });

        edgelabels.attr('transform', function (d) {
            if (d.target.x < d.source.x) {
                var bbox = this.getBBox();

                rx = bbox.x + bbox.width / 2;
                ry = bbox.y + bbox.height / 2;
                return 'rotate(180 ' + rx + ' ' + ry + ')';
            }
            else {
                return 'rotate(0)';
            }
        });
    }

    function dragstarted(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart()
        d.fx = d.x;
        d.fy = d.y;
    }

    function dragged(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    d3.json("p1.json", function (error, graph) {
        d3.json("p2.json", function (error, rut) {
        var s = graph.nodes[0],str,band=0,i,i2,nodos=[],link=[],nombres =[],source=[],target=[],type=[],distance=[]
        document.getElementById("text1").value = s;
        do{
            i =s.indexOf(";");
            if(i==-1){
                band=1;
            }else{
                str= s.substring(0, i);
                s= s.substring(i+1, s.length);
                if(str.includes("-")){
                i =str.indexOf("-");
                
                source.push(""+str.substring(0,i));
                target.push(str.substring(i+1,str.indexOf(",")));
                type.push(str.substring(str.indexOf(",")+1,str.indexOf(":")));
                distance.push(str.substring(str.indexOf(":")+1,str.length+1));
                if(!nombres.includes(str.substring(0,i))){
                    nombres.push(str.substring(0,i));
                }
                if(!nombres.includes(str.substring(i+1,str.indexOf(",")))){
                    nombres.push(str.substring(i+1,str.indexOf(",")));
                }
                }else if(str.length>0){
                    if(!nombres.includes(str.substring(0,str.length+1))){
                        nombres.push(str.substring(0,str.length+1));
                    }
                }
            }
        }while(band==0);
        for (i=0;i<nombres.length;i++){
            nodos.push({"name":nombres[i],"id":i+1});
        }
        for (i=0;i<source.length;i++){
            link.push({"source": source[i],"target": target[i],"type": type[i],"distance":distance[i]});
        }
        s=rut.route;
        document.getElementById('ruta').value=s;
        d3.json("p3.json", function (error, ver) {
            document.getElementById("rutacorta").readOnly = true;
            let l=link;
            if(ver.nodes==1){
            var sour,tar;
            i =s.indexOf(";");
             if(i==-1){
                    band=1;
                }else{
                 str= s.substring(0, i);
                   s= s.substring(i+1, s.length);
                if(str.includes("-")){
                    i =str.indexOf("-");
                    sour=(""+str.substring(0,i));
                    tar=(str.substring(i+1,str.length+1));
                }
            }
            dij(sour,tar,link,nodos);
            }else{
                document.getElementById("rutacorta").value="";
            }
            update(link,nodos);

            }) 
        
       }) 
    })
    function route(nodos3,lin){
        var mat1=[],mat2=[],s;
        for (var i=0;i<nodos3.length;i++){
            for (var j=0;j<nodos3.length;j++){
                s=-1;
                if(nodos3[i]==nodos3[j]){
                        mat1.push(0);
                }else{
                    for (var k=0;k<lin.length;k++){
                        if(lin[k].target==nodos3[j]){
                            if(lin[k].source==nodos3[i]){
                                mat1.push(lin[k].distance);
                                s=0;
                            }
                        }
                    }
                }
                if(s==-1 && !(nodos3[i]==nodos3[j])){
                    mat1.push(9999);
                }
            }
            mat2.push(mat1);
            mat1=[];
        }
        console.log(mat2);
        return (mat2);
    }
    var matrix=[],matrix2=[];
    function dij(v1,v2,links,nodos) {
        var nolisto= true,band=false;
        var nodos2=[], pesos;
        
            for (i=0;i<nodos.length;i++){
                if(nodos[i].name==v1 && !band){
                    nodos2.push(nodos[i].name);
                    band=true;
                    i=0;
                }
                if(band && !(nodos[i].name==v1)){
                    nodos2.push(nodos[i].name);
                }
            }
            console.log(nodos2);
            pesos = route(nodos2,links);
            var min=9999,minn=pesos[0],num=0,i=0,i2,band=0,recorrido=nodos2[0],dist=0,dist2=0;
            do{
                min=9999;
                for (j=0;j<nodos.length;j++){
                    if(pesos[i][j]!=0 && pesos[i][j]<min){
                        min=pesos[i][j];
                        recorrido+="-"+nodos2[j];
                        i2=j;
                        
                    }
                }
                
                dist=parseInt(dist)+parseInt(min);
                i=i2;
                if(nodos2[i2]==v2){
                        band=1;
                    }
                num++;
            }while(num<nodos.length && band==0);
            if(!recorrido.includes(v2)){
                recorrido=v1+"-"+v2;
                dist= "infinito, no hay recorrido posible";
            }
            console.log("recorrido: "+recorrido+" : "+dist);
            document.getElementById('rutacorta').value=("recorrido: "+recorrido+"; distancia: "+dist);
    }
</script>

</body>
</html>